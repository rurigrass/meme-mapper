// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  User User? @relation(fields: [userId], references: [id])
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  username       String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  role           UserRole  @default(USER)
  createdMemes   Meme[]    @relation("CreatedBy")
  scores         Score[]   @relation("PlayedBy")

  accounts Account[]
}

model Meme {
  id       String  @id @default(cuid()) @map("_id")
  name     String
  url      String
  fileUrl  String
  lat      Float
  lng      Float
  verified Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creator   User?   @relation("CreatedBy", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String? @db.ObjectId

  scores Score[] @relation("ScoreBoard")
}

model Score {
  id    String @id @default(cuid()) @map("_id")
  score Int

  meme   Meme   @relation("ScoreBoard", fields: [memeId], references: [id], onDelete: Cascade)
  memeId String

  player   User   @relation("PlayedBy", fields: [playerId], references: [id], onDelete: Cascade)
  playerId String @db.ObjectId
}
